
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Student_program
 * 
 */
export type Student_program = $Result.DefaultSelection<Prisma.$Student_programPayload>
/**
 * Model Student_class
 * 
 */
export type Student_class = $Result.DefaultSelection<Prisma.$Student_classPayload>
/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Student_verification
 * 
 */
export type Student_verification = $Result.DefaultSelection<Prisma.$Student_verificationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const verification_status: {
  active: 'active',
  inactive: 'inactive'
};

export type verification_status = (typeof verification_status)[keyof typeof verification_status]

}

export type verification_status = $Enums.verification_status

export const verification_status: typeof $Enums.verification_status

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Student_programs
 * const student_programs = await prisma.student_program.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Student_programs
   * const student_programs = await prisma.student_program.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.student_program`: Exposes CRUD operations for the **Student_program** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Student_programs
    * const student_programs = await prisma.student_program.findMany()
    * ```
    */
  get student_program(): Prisma.Student_programDelegate<ExtArgs>;

  /**
   * `prisma.student_class`: Exposes CRUD operations for the **Student_class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Student_classes
    * const student_classes = await prisma.student_class.findMany()
    * ```
    */
  get student_class(): Prisma.Student_classDelegate<ExtArgs>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs>;

  /**
   * `prisma.student_verification`: Exposes CRUD operations for the **Student_verification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Student_verifications
    * const student_verifications = await prisma.student_verification.findMany()
    * ```
    */
  get student_verification(): Prisma.Student_verificationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.20.0
   * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Student_program: 'Student_program',
    Student_class: 'Student_class',
    Student: 'Student',
    Admin: 'Admin',
    Student_verification: 'Student_verification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "student_program" | "student_class" | "student" | "admin" | "student_verification"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Student_program: {
        payload: Prisma.$Student_programPayload<ExtArgs>
        fields: Prisma.Student_programFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Student_programFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_programPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Student_programFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_programPayload>
          }
          findFirst: {
            args: Prisma.Student_programFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_programPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Student_programFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_programPayload>
          }
          findMany: {
            args: Prisma.Student_programFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_programPayload>[]
          }
          create: {
            args: Prisma.Student_programCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_programPayload>
          }
          createMany: {
            args: Prisma.Student_programCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.Student_programDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_programPayload>
          }
          update: {
            args: Prisma.Student_programUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_programPayload>
          }
          deleteMany: {
            args: Prisma.Student_programDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Student_programUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Student_programUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_programPayload>
          }
          aggregate: {
            args: Prisma.Student_programAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent_program>
          }
          groupBy: {
            args: Prisma.Student_programGroupByArgs<ExtArgs>
            result: $Utils.Optional<Student_programGroupByOutputType>[]
          }
          count: {
            args: Prisma.Student_programCountArgs<ExtArgs>
            result: $Utils.Optional<Student_programCountAggregateOutputType> | number
          }
        }
      }
      Student_class: {
        payload: Prisma.$Student_classPayload<ExtArgs>
        fields: Prisma.Student_classFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Student_classFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_classPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Student_classFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_classPayload>
          }
          findFirst: {
            args: Prisma.Student_classFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_classPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Student_classFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_classPayload>
          }
          findMany: {
            args: Prisma.Student_classFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_classPayload>[]
          }
          create: {
            args: Prisma.Student_classCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_classPayload>
          }
          createMany: {
            args: Prisma.Student_classCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.Student_classDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_classPayload>
          }
          update: {
            args: Prisma.Student_classUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_classPayload>
          }
          deleteMany: {
            args: Prisma.Student_classDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Student_classUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Student_classUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_classPayload>
          }
          aggregate: {
            args: Prisma.Student_classAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent_class>
          }
          groupBy: {
            args: Prisma.Student_classGroupByArgs<ExtArgs>
            result: $Utils.Optional<Student_classGroupByOutputType>[]
          }
          count: {
            args: Prisma.Student_classCountArgs<ExtArgs>
            result: $Utils.Optional<Student_classCountAggregateOutputType> | number
          }
        }
      }
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Student_verification: {
        payload: Prisma.$Student_verificationPayload<ExtArgs>
        fields: Prisma.Student_verificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Student_verificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_verificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Student_verificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_verificationPayload>
          }
          findFirst: {
            args: Prisma.Student_verificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_verificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Student_verificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_verificationPayload>
          }
          findMany: {
            args: Prisma.Student_verificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_verificationPayload>[]
          }
          create: {
            args: Prisma.Student_verificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_verificationPayload>
          }
          createMany: {
            args: Prisma.Student_verificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.Student_verificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_verificationPayload>
          }
          update: {
            args: Prisma.Student_verificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_verificationPayload>
          }
          deleteMany: {
            args: Prisma.Student_verificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Student_verificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Student_verificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student_verificationPayload>
          }
          aggregate: {
            args: Prisma.Student_verificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent_verification>
          }
          groupBy: {
            args: Prisma.Student_verificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<Student_verificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.Student_verificationCountArgs<ExtArgs>
            result: $Utils.Optional<Student_verificationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Student_programCountOutputType
   */

  export type Student_programCountOutputType = {
    student: number
  }

  export type Student_programCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | Student_programCountOutputTypeCountStudentArgs
  }

  // Custom InputTypes
  /**
   * Student_programCountOutputType without action
   */
  export type Student_programCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_programCountOutputType
     */
    select?: Student_programCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Student_programCountOutputType without action
   */
  export type Student_programCountOutputTypeCountStudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }


  /**
   * Count Type Student_classCountOutputType
   */

  export type Student_classCountOutputType = {
    student: number
  }

  export type Student_classCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | Student_classCountOutputTypeCountStudentArgs
  }

  // Custom InputTypes
  /**
   * Student_classCountOutputType without action
   */
  export type Student_classCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_classCountOutputType
     */
    select?: Student_classCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Student_classCountOutputType without action
   */
  export type Student_classCountOutputTypeCountStudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Student_program
   */

  export type AggregateStudent_program = {
    _count: Student_programCountAggregateOutputType | null
    _avg: Student_programAvgAggregateOutputType | null
    _sum: Student_programSumAggregateOutputType | null
    _min: Student_programMinAggregateOutputType | null
    _max: Student_programMaxAggregateOutputType | null
  }

  export type Student_programAvgAggregateOutputType = {
    program_id: number | null
  }

  export type Student_programSumAggregateOutputType = {
    program_id: number | null
  }

  export type Student_programMinAggregateOutputType = {
    program_id: number | null
    program_name: string | null
  }

  export type Student_programMaxAggregateOutputType = {
    program_id: number | null
    program_name: string | null
  }

  export type Student_programCountAggregateOutputType = {
    program_id: number
    program_name: number
    _all: number
  }


  export type Student_programAvgAggregateInputType = {
    program_id?: true
  }

  export type Student_programSumAggregateInputType = {
    program_id?: true
  }

  export type Student_programMinAggregateInputType = {
    program_id?: true
    program_name?: true
  }

  export type Student_programMaxAggregateInputType = {
    program_id?: true
    program_name?: true
  }

  export type Student_programCountAggregateInputType = {
    program_id?: true
    program_name?: true
    _all?: true
  }

  export type Student_programAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student_program to aggregate.
     */
    where?: Student_programWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student_programs to fetch.
     */
    orderBy?: Student_programOrderByWithRelationInput | Student_programOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Student_programWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student_programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student_programs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Student_programs
    **/
    _count?: true | Student_programCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Student_programAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Student_programSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Student_programMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Student_programMaxAggregateInputType
  }

  export type GetStudent_programAggregateType<T extends Student_programAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent_program]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent_program[P]>
      : GetScalarType<T[P], AggregateStudent_program[P]>
  }




  export type Student_programGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Student_programWhereInput
    orderBy?: Student_programOrderByWithAggregationInput | Student_programOrderByWithAggregationInput[]
    by: Student_programScalarFieldEnum[] | Student_programScalarFieldEnum
    having?: Student_programScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Student_programCountAggregateInputType | true
    _avg?: Student_programAvgAggregateInputType
    _sum?: Student_programSumAggregateInputType
    _min?: Student_programMinAggregateInputType
    _max?: Student_programMaxAggregateInputType
  }

  export type Student_programGroupByOutputType = {
    program_id: number
    program_name: string
    _count: Student_programCountAggregateOutputType | null
    _avg: Student_programAvgAggregateOutputType | null
    _sum: Student_programSumAggregateOutputType | null
    _min: Student_programMinAggregateOutputType | null
    _max: Student_programMaxAggregateOutputType | null
  }

  type GetStudent_programGroupByPayload<T extends Student_programGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Student_programGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Student_programGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Student_programGroupByOutputType[P]>
            : GetScalarType<T[P], Student_programGroupByOutputType[P]>
        }
      >
    >


  export type Student_programSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    program_id?: boolean
    program_name?: boolean
    student?: boolean | Student_program$studentArgs<ExtArgs>
    _count?: boolean | Student_programCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student_program"]>


  export type Student_programSelectScalar = {
    program_id?: boolean
    program_name?: boolean
  }

  export type Student_programInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | Student_program$studentArgs<ExtArgs>
    _count?: boolean | Student_programCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $Student_programPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student_program"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      program_id: number
      program_name: string
    }, ExtArgs["result"]["student_program"]>
    composites: {}
  }

  type Student_programGetPayload<S extends boolean | null | undefined | Student_programDefaultArgs> = $Result.GetResult<Prisma.$Student_programPayload, S>

  type Student_programCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Student_programFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Student_programCountAggregateInputType | true
    }

  export interface Student_programDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student_program'], meta: { name: 'Student_program' } }
    /**
     * Find zero or one Student_program that matches the filter.
     * @param {Student_programFindUniqueArgs} args - Arguments to find a Student_program
     * @example
     * // Get one Student_program
     * const student_program = await prisma.student_program.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Student_programFindUniqueArgs>(args: SelectSubset<T, Student_programFindUniqueArgs<ExtArgs>>): Prisma__Student_programClient<$Result.GetResult<Prisma.$Student_programPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Student_program that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {Student_programFindUniqueOrThrowArgs} args - Arguments to find a Student_program
     * @example
     * // Get one Student_program
     * const student_program = await prisma.student_program.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Student_programFindUniqueOrThrowArgs>(args: SelectSubset<T, Student_programFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Student_programClient<$Result.GetResult<Prisma.$Student_programPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Student_program that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_programFindFirstArgs} args - Arguments to find a Student_program
     * @example
     * // Get one Student_program
     * const student_program = await prisma.student_program.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Student_programFindFirstArgs>(args?: SelectSubset<T, Student_programFindFirstArgs<ExtArgs>>): Prisma__Student_programClient<$Result.GetResult<Prisma.$Student_programPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Student_program that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_programFindFirstOrThrowArgs} args - Arguments to find a Student_program
     * @example
     * // Get one Student_program
     * const student_program = await prisma.student_program.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Student_programFindFirstOrThrowArgs>(args?: SelectSubset<T, Student_programFindFirstOrThrowArgs<ExtArgs>>): Prisma__Student_programClient<$Result.GetResult<Prisma.$Student_programPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Student_programs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_programFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Student_programs
     * const student_programs = await prisma.student_program.findMany()
     * 
     * // Get first 10 Student_programs
     * const student_programs = await prisma.student_program.findMany({ take: 10 })
     * 
     * // Only select the `program_id`
     * const student_programWithProgram_idOnly = await prisma.student_program.findMany({ select: { program_id: true } })
     * 
     */
    findMany<T extends Student_programFindManyArgs>(args?: SelectSubset<T, Student_programFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Student_programPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Student_program.
     * @param {Student_programCreateArgs} args - Arguments to create a Student_program.
     * @example
     * // Create one Student_program
     * const Student_program = await prisma.student_program.create({
     *   data: {
     *     // ... data to create a Student_program
     *   }
     * })
     * 
     */
    create<T extends Student_programCreateArgs>(args: SelectSubset<T, Student_programCreateArgs<ExtArgs>>): Prisma__Student_programClient<$Result.GetResult<Prisma.$Student_programPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Student_programs.
     * @param {Student_programCreateManyArgs} args - Arguments to create many Student_programs.
     * @example
     * // Create many Student_programs
     * const student_program = await prisma.student_program.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Student_programCreateManyArgs>(args?: SelectSubset<T, Student_programCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Student_program.
     * @param {Student_programDeleteArgs} args - Arguments to delete one Student_program.
     * @example
     * // Delete one Student_program
     * const Student_program = await prisma.student_program.delete({
     *   where: {
     *     // ... filter to delete one Student_program
     *   }
     * })
     * 
     */
    delete<T extends Student_programDeleteArgs>(args: SelectSubset<T, Student_programDeleteArgs<ExtArgs>>): Prisma__Student_programClient<$Result.GetResult<Prisma.$Student_programPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Student_program.
     * @param {Student_programUpdateArgs} args - Arguments to update one Student_program.
     * @example
     * // Update one Student_program
     * const student_program = await prisma.student_program.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Student_programUpdateArgs>(args: SelectSubset<T, Student_programUpdateArgs<ExtArgs>>): Prisma__Student_programClient<$Result.GetResult<Prisma.$Student_programPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Student_programs.
     * @param {Student_programDeleteManyArgs} args - Arguments to filter Student_programs to delete.
     * @example
     * // Delete a few Student_programs
     * const { count } = await prisma.student_program.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Student_programDeleteManyArgs>(args?: SelectSubset<T, Student_programDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Student_programs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_programUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Student_programs
     * const student_program = await prisma.student_program.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Student_programUpdateManyArgs>(args: SelectSubset<T, Student_programUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Student_program.
     * @param {Student_programUpsertArgs} args - Arguments to update or create a Student_program.
     * @example
     * // Update or create a Student_program
     * const student_program = await prisma.student_program.upsert({
     *   create: {
     *     // ... data to create a Student_program
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student_program we want to update
     *   }
     * })
     */
    upsert<T extends Student_programUpsertArgs>(args: SelectSubset<T, Student_programUpsertArgs<ExtArgs>>): Prisma__Student_programClient<$Result.GetResult<Prisma.$Student_programPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Student_programs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_programCountArgs} args - Arguments to filter Student_programs to count.
     * @example
     * // Count the number of Student_programs
     * const count = await prisma.student_program.count({
     *   where: {
     *     // ... the filter for the Student_programs we want to count
     *   }
     * })
    **/
    count<T extends Student_programCountArgs>(
      args?: Subset<T, Student_programCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Student_programCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student_program.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_programAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Student_programAggregateArgs>(args: Subset<T, Student_programAggregateArgs>): Prisma.PrismaPromise<GetStudent_programAggregateType<T>>

    /**
     * Group by Student_program.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_programGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Student_programGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Student_programGroupByArgs['orderBy'] }
        : { orderBy?: Student_programGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Student_programGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudent_programGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student_program model
   */
  readonly fields: Student_programFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student_program.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Student_programClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends Student_program$studentArgs<ExtArgs> = {}>(args?: Subset<T, Student_program$studentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student_program model
   */ 
  interface Student_programFieldRefs {
    readonly program_id: FieldRef<"Student_program", 'Int'>
    readonly program_name: FieldRef<"Student_program", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Student_program findUnique
   */
  export type Student_programFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_program
     */
    select?: Student_programSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_programInclude<ExtArgs> | null
    /**
     * Filter, which Student_program to fetch.
     */
    where: Student_programWhereUniqueInput
  }

  /**
   * Student_program findUniqueOrThrow
   */
  export type Student_programFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_program
     */
    select?: Student_programSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_programInclude<ExtArgs> | null
    /**
     * Filter, which Student_program to fetch.
     */
    where: Student_programWhereUniqueInput
  }

  /**
   * Student_program findFirst
   */
  export type Student_programFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_program
     */
    select?: Student_programSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_programInclude<ExtArgs> | null
    /**
     * Filter, which Student_program to fetch.
     */
    where?: Student_programWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student_programs to fetch.
     */
    orderBy?: Student_programOrderByWithRelationInput | Student_programOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Student_programs.
     */
    cursor?: Student_programWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student_programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student_programs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Student_programs.
     */
    distinct?: Student_programScalarFieldEnum | Student_programScalarFieldEnum[]
  }

  /**
   * Student_program findFirstOrThrow
   */
  export type Student_programFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_program
     */
    select?: Student_programSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_programInclude<ExtArgs> | null
    /**
     * Filter, which Student_program to fetch.
     */
    where?: Student_programWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student_programs to fetch.
     */
    orderBy?: Student_programOrderByWithRelationInput | Student_programOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Student_programs.
     */
    cursor?: Student_programWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student_programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student_programs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Student_programs.
     */
    distinct?: Student_programScalarFieldEnum | Student_programScalarFieldEnum[]
  }

  /**
   * Student_program findMany
   */
  export type Student_programFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_program
     */
    select?: Student_programSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_programInclude<ExtArgs> | null
    /**
     * Filter, which Student_programs to fetch.
     */
    where?: Student_programWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student_programs to fetch.
     */
    orderBy?: Student_programOrderByWithRelationInput | Student_programOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Student_programs.
     */
    cursor?: Student_programWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student_programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student_programs.
     */
    skip?: number
    distinct?: Student_programScalarFieldEnum | Student_programScalarFieldEnum[]
  }

  /**
   * Student_program create
   */
  export type Student_programCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_program
     */
    select?: Student_programSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_programInclude<ExtArgs> | null
    /**
     * The data needed to create a Student_program.
     */
    data: XOR<Student_programCreateInput, Student_programUncheckedCreateInput>
  }

  /**
   * Student_program createMany
   */
  export type Student_programCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Student_programs.
     */
    data: Student_programCreateManyInput | Student_programCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student_program update
   */
  export type Student_programUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_program
     */
    select?: Student_programSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_programInclude<ExtArgs> | null
    /**
     * The data needed to update a Student_program.
     */
    data: XOR<Student_programUpdateInput, Student_programUncheckedUpdateInput>
    /**
     * Choose, which Student_program to update.
     */
    where: Student_programWhereUniqueInput
  }

  /**
   * Student_program updateMany
   */
  export type Student_programUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Student_programs.
     */
    data: XOR<Student_programUpdateManyMutationInput, Student_programUncheckedUpdateManyInput>
    /**
     * Filter which Student_programs to update
     */
    where?: Student_programWhereInput
  }

  /**
   * Student_program upsert
   */
  export type Student_programUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_program
     */
    select?: Student_programSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_programInclude<ExtArgs> | null
    /**
     * The filter to search for the Student_program to update in case it exists.
     */
    where: Student_programWhereUniqueInput
    /**
     * In case the Student_program found by the `where` argument doesn't exist, create a new Student_program with this data.
     */
    create: XOR<Student_programCreateInput, Student_programUncheckedCreateInput>
    /**
     * In case the Student_program was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Student_programUpdateInput, Student_programUncheckedUpdateInput>
  }

  /**
   * Student_program delete
   */
  export type Student_programDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_program
     */
    select?: Student_programSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_programInclude<ExtArgs> | null
    /**
     * Filter which Student_program to delete.
     */
    where: Student_programWhereUniqueInput
  }

  /**
   * Student_program deleteMany
   */
  export type Student_programDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student_programs to delete
     */
    where?: Student_programWhereInput
  }

  /**
   * Student_program.student
   */
  export type Student_program$studentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student_program without action
   */
  export type Student_programDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_program
     */
    select?: Student_programSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_programInclude<ExtArgs> | null
  }


  /**
   * Model Student_class
   */

  export type AggregateStudent_class = {
    _count: Student_classCountAggregateOutputType | null
    _avg: Student_classAvgAggregateOutputType | null
    _sum: Student_classSumAggregateOutputType | null
    _min: Student_classMinAggregateOutputType | null
    _max: Student_classMaxAggregateOutputType | null
  }

  export type Student_classAvgAggregateOutputType = {
    class_id: number | null
  }

  export type Student_classSumAggregateOutputType = {
    class_id: number | null
  }

  export type Student_classMinAggregateOutputType = {
    class_id: number | null
    class_name: string | null
  }

  export type Student_classMaxAggregateOutputType = {
    class_id: number | null
    class_name: string | null
  }

  export type Student_classCountAggregateOutputType = {
    class_id: number
    class_name: number
    _all: number
  }


  export type Student_classAvgAggregateInputType = {
    class_id?: true
  }

  export type Student_classSumAggregateInputType = {
    class_id?: true
  }

  export type Student_classMinAggregateInputType = {
    class_id?: true
    class_name?: true
  }

  export type Student_classMaxAggregateInputType = {
    class_id?: true
    class_name?: true
  }

  export type Student_classCountAggregateInputType = {
    class_id?: true
    class_name?: true
    _all?: true
  }

  export type Student_classAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student_class to aggregate.
     */
    where?: Student_classWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student_classes to fetch.
     */
    orderBy?: Student_classOrderByWithRelationInput | Student_classOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Student_classWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student_classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student_classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Student_classes
    **/
    _count?: true | Student_classCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Student_classAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Student_classSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Student_classMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Student_classMaxAggregateInputType
  }

  export type GetStudent_classAggregateType<T extends Student_classAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent_class]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent_class[P]>
      : GetScalarType<T[P], AggregateStudent_class[P]>
  }




  export type Student_classGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Student_classWhereInput
    orderBy?: Student_classOrderByWithAggregationInput | Student_classOrderByWithAggregationInput[]
    by: Student_classScalarFieldEnum[] | Student_classScalarFieldEnum
    having?: Student_classScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Student_classCountAggregateInputType | true
    _avg?: Student_classAvgAggregateInputType
    _sum?: Student_classSumAggregateInputType
    _min?: Student_classMinAggregateInputType
    _max?: Student_classMaxAggregateInputType
  }

  export type Student_classGroupByOutputType = {
    class_id: number
    class_name: string
    _count: Student_classCountAggregateOutputType | null
    _avg: Student_classAvgAggregateOutputType | null
    _sum: Student_classSumAggregateOutputType | null
    _min: Student_classMinAggregateOutputType | null
    _max: Student_classMaxAggregateOutputType | null
  }

  type GetStudent_classGroupByPayload<T extends Student_classGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Student_classGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Student_classGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Student_classGroupByOutputType[P]>
            : GetScalarType<T[P], Student_classGroupByOutputType[P]>
        }
      >
    >


  export type Student_classSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    class_id?: boolean
    class_name?: boolean
    student?: boolean | Student_class$studentArgs<ExtArgs>
    _count?: boolean | Student_classCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student_class"]>


  export type Student_classSelectScalar = {
    class_id?: boolean
    class_name?: boolean
  }

  export type Student_classInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | Student_class$studentArgs<ExtArgs>
    _count?: boolean | Student_classCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $Student_classPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student_class"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      class_id: number
      class_name: string
    }, ExtArgs["result"]["student_class"]>
    composites: {}
  }

  type Student_classGetPayload<S extends boolean | null | undefined | Student_classDefaultArgs> = $Result.GetResult<Prisma.$Student_classPayload, S>

  type Student_classCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Student_classFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Student_classCountAggregateInputType | true
    }

  export interface Student_classDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student_class'], meta: { name: 'Student_class' } }
    /**
     * Find zero or one Student_class that matches the filter.
     * @param {Student_classFindUniqueArgs} args - Arguments to find a Student_class
     * @example
     * // Get one Student_class
     * const student_class = await prisma.student_class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Student_classFindUniqueArgs>(args: SelectSubset<T, Student_classFindUniqueArgs<ExtArgs>>): Prisma__Student_classClient<$Result.GetResult<Prisma.$Student_classPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Student_class that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {Student_classFindUniqueOrThrowArgs} args - Arguments to find a Student_class
     * @example
     * // Get one Student_class
     * const student_class = await prisma.student_class.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Student_classFindUniqueOrThrowArgs>(args: SelectSubset<T, Student_classFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Student_classClient<$Result.GetResult<Prisma.$Student_classPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Student_class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_classFindFirstArgs} args - Arguments to find a Student_class
     * @example
     * // Get one Student_class
     * const student_class = await prisma.student_class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Student_classFindFirstArgs>(args?: SelectSubset<T, Student_classFindFirstArgs<ExtArgs>>): Prisma__Student_classClient<$Result.GetResult<Prisma.$Student_classPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Student_class that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_classFindFirstOrThrowArgs} args - Arguments to find a Student_class
     * @example
     * // Get one Student_class
     * const student_class = await prisma.student_class.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Student_classFindFirstOrThrowArgs>(args?: SelectSubset<T, Student_classFindFirstOrThrowArgs<ExtArgs>>): Prisma__Student_classClient<$Result.GetResult<Prisma.$Student_classPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Student_classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_classFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Student_classes
     * const student_classes = await prisma.student_class.findMany()
     * 
     * // Get first 10 Student_classes
     * const student_classes = await prisma.student_class.findMany({ take: 10 })
     * 
     * // Only select the `class_id`
     * const student_classWithClass_idOnly = await prisma.student_class.findMany({ select: { class_id: true } })
     * 
     */
    findMany<T extends Student_classFindManyArgs>(args?: SelectSubset<T, Student_classFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Student_classPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Student_class.
     * @param {Student_classCreateArgs} args - Arguments to create a Student_class.
     * @example
     * // Create one Student_class
     * const Student_class = await prisma.student_class.create({
     *   data: {
     *     // ... data to create a Student_class
     *   }
     * })
     * 
     */
    create<T extends Student_classCreateArgs>(args: SelectSubset<T, Student_classCreateArgs<ExtArgs>>): Prisma__Student_classClient<$Result.GetResult<Prisma.$Student_classPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Student_classes.
     * @param {Student_classCreateManyArgs} args - Arguments to create many Student_classes.
     * @example
     * // Create many Student_classes
     * const student_class = await prisma.student_class.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Student_classCreateManyArgs>(args?: SelectSubset<T, Student_classCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Student_class.
     * @param {Student_classDeleteArgs} args - Arguments to delete one Student_class.
     * @example
     * // Delete one Student_class
     * const Student_class = await prisma.student_class.delete({
     *   where: {
     *     // ... filter to delete one Student_class
     *   }
     * })
     * 
     */
    delete<T extends Student_classDeleteArgs>(args: SelectSubset<T, Student_classDeleteArgs<ExtArgs>>): Prisma__Student_classClient<$Result.GetResult<Prisma.$Student_classPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Student_class.
     * @param {Student_classUpdateArgs} args - Arguments to update one Student_class.
     * @example
     * // Update one Student_class
     * const student_class = await prisma.student_class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Student_classUpdateArgs>(args: SelectSubset<T, Student_classUpdateArgs<ExtArgs>>): Prisma__Student_classClient<$Result.GetResult<Prisma.$Student_classPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Student_classes.
     * @param {Student_classDeleteManyArgs} args - Arguments to filter Student_classes to delete.
     * @example
     * // Delete a few Student_classes
     * const { count } = await prisma.student_class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Student_classDeleteManyArgs>(args?: SelectSubset<T, Student_classDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Student_classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_classUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Student_classes
     * const student_class = await prisma.student_class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Student_classUpdateManyArgs>(args: SelectSubset<T, Student_classUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Student_class.
     * @param {Student_classUpsertArgs} args - Arguments to update or create a Student_class.
     * @example
     * // Update or create a Student_class
     * const student_class = await prisma.student_class.upsert({
     *   create: {
     *     // ... data to create a Student_class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student_class we want to update
     *   }
     * })
     */
    upsert<T extends Student_classUpsertArgs>(args: SelectSubset<T, Student_classUpsertArgs<ExtArgs>>): Prisma__Student_classClient<$Result.GetResult<Prisma.$Student_classPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Student_classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_classCountArgs} args - Arguments to filter Student_classes to count.
     * @example
     * // Count the number of Student_classes
     * const count = await prisma.student_class.count({
     *   where: {
     *     // ... the filter for the Student_classes we want to count
     *   }
     * })
    **/
    count<T extends Student_classCountArgs>(
      args?: Subset<T, Student_classCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Student_classCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student_class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_classAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Student_classAggregateArgs>(args: Subset<T, Student_classAggregateArgs>): Prisma.PrismaPromise<GetStudent_classAggregateType<T>>

    /**
     * Group by Student_class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_classGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Student_classGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Student_classGroupByArgs['orderBy'] }
        : { orderBy?: Student_classGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Student_classGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudent_classGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student_class model
   */
  readonly fields: Student_classFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student_class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Student_classClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends Student_class$studentArgs<ExtArgs> = {}>(args?: Subset<T, Student_class$studentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student_class model
   */ 
  interface Student_classFieldRefs {
    readonly class_id: FieldRef<"Student_class", 'Int'>
    readonly class_name: FieldRef<"Student_class", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Student_class findUnique
   */
  export type Student_classFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_class
     */
    select?: Student_classSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_classInclude<ExtArgs> | null
    /**
     * Filter, which Student_class to fetch.
     */
    where: Student_classWhereUniqueInput
  }

  /**
   * Student_class findUniqueOrThrow
   */
  export type Student_classFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_class
     */
    select?: Student_classSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_classInclude<ExtArgs> | null
    /**
     * Filter, which Student_class to fetch.
     */
    where: Student_classWhereUniqueInput
  }

  /**
   * Student_class findFirst
   */
  export type Student_classFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_class
     */
    select?: Student_classSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_classInclude<ExtArgs> | null
    /**
     * Filter, which Student_class to fetch.
     */
    where?: Student_classWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student_classes to fetch.
     */
    orderBy?: Student_classOrderByWithRelationInput | Student_classOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Student_classes.
     */
    cursor?: Student_classWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student_classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student_classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Student_classes.
     */
    distinct?: Student_classScalarFieldEnum | Student_classScalarFieldEnum[]
  }

  /**
   * Student_class findFirstOrThrow
   */
  export type Student_classFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_class
     */
    select?: Student_classSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_classInclude<ExtArgs> | null
    /**
     * Filter, which Student_class to fetch.
     */
    where?: Student_classWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student_classes to fetch.
     */
    orderBy?: Student_classOrderByWithRelationInput | Student_classOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Student_classes.
     */
    cursor?: Student_classWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student_classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student_classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Student_classes.
     */
    distinct?: Student_classScalarFieldEnum | Student_classScalarFieldEnum[]
  }

  /**
   * Student_class findMany
   */
  export type Student_classFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_class
     */
    select?: Student_classSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_classInclude<ExtArgs> | null
    /**
     * Filter, which Student_classes to fetch.
     */
    where?: Student_classWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student_classes to fetch.
     */
    orderBy?: Student_classOrderByWithRelationInput | Student_classOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Student_classes.
     */
    cursor?: Student_classWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student_classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student_classes.
     */
    skip?: number
    distinct?: Student_classScalarFieldEnum | Student_classScalarFieldEnum[]
  }

  /**
   * Student_class create
   */
  export type Student_classCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_class
     */
    select?: Student_classSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_classInclude<ExtArgs> | null
    /**
     * The data needed to create a Student_class.
     */
    data: XOR<Student_classCreateInput, Student_classUncheckedCreateInput>
  }

  /**
   * Student_class createMany
   */
  export type Student_classCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Student_classes.
     */
    data: Student_classCreateManyInput | Student_classCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student_class update
   */
  export type Student_classUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_class
     */
    select?: Student_classSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_classInclude<ExtArgs> | null
    /**
     * The data needed to update a Student_class.
     */
    data: XOR<Student_classUpdateInput, Student_classUncheckedUpdateInput>
    /**
     * Choose, which Student_class to update.
     */
    where: Student_classWhereUniqueInput
  }

  /**
   * Student_class updateMany
   */
  export type Student_classUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Student_classes.
     */
    data: XOR<Student_classUpdateManyMutationInput, Student_classUncheckedUpdateManyInput>
    /**
     * Filter which Student_classes to update
     */
    where?: Student_classWhereInput
  }

  /**
   * Student_class upsert
   */
  export type Student_classUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_class
     */
    select?: Student_classSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_classInclude<ExtArgs> | null
    /**
     * The filter to search for the Student_class to update in case it exists.
     */
    where: Student_classWhereUniqueInput
    /**
     * In case the Student_class found by the `where` argument doesn't exist, create a new Student_class with this data.
     */
    create: XOR<Student_classCreateInput, Student_classUncheckedCreateInput>
    /**
     * In case the Student_class was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Student_classUpdateInput, Student_classUncheckedUpdateInput>
  }

  /**
   * Student_class delete
   */
  export type Student_classDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_class
     */
    select?: Student_classSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_classInclude<ExtArgs> | null
    /**
     * Filter which Student_class to delete.
     */
    where: Student_classWhereUniqueInput
  }

  /**
   * Student_class deleteMany
   */
  export type Student_classDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student_classes to delete
     */
    where?: Student_classWhereInput
  }

  /**
   * Student_class.student
   */
  export type Student_class$studentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student_class without action
   */
  export type Student_classDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_class
     */
    select?: Student_classSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_classInclude<ExtArgs> | null
  }


  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    class_id: number | null
    program_id: number | null
  }

  export type StudentSumAggregateOutputType = {
    class_id: number | null
    program_id: number | null
  }

  export type StudentMinAggregateOutputType = {
    id: string | null
    name: string | null
    nim: string | null
    email: string | null
    password: string | null
    class_id: number | null
    program_id: number | null
  }

  export type StudentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    nim: string | null
    email: string | null
    password: string | null
    class_id: number | null
    program_id: number | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    name: number
    nim: number
    email: number
    password: number
    class_id: number
    program_id: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    class_id?: true
    program_id?: true
  }

  export type StudentSumAggregateInputType = {
    class_id?: true
    program_id?: true
  }

  export type StudentMinAggregateInputType = {
    id?: true
    name?: true
    nim?: true
    email?: true
    password?: true
    class_id?: true
    program_id?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    name?: true
    nim?: true
    email?: true
    password?: true
    class_id?: true
    program_id?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    name?: true
    nim?: true
    email?: true
    password?: true
    class_id?: true
    program_id?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    id: string
    name: string
    nim: string
    email: string
    password: string
    class_id: number
    program_id: number
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    nim?: boolean
    email?: boolean
    password?: boolean
    class_id?: boolean
    program_id?: boolean
    student_class?: boolean | Student_classDefaultArgs<ExtArgs>
    student_program?: boolean | Student_programDefaultArgs<ExtArgs>
    student_verification?: boolean | Student$student_verificationArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>


  export type StudentSelectScalar = {
    id?: boolean
    name?: boolean
    nim?: boolean
    email?: boolean
    password?: boolean
    class_id?: boolean
    program_id?: boolean
  }

  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student_class?: boolean | Student_classDefaultArgs<ExtArgs>
    student_program?: boolean | Student_programDefaultArgs<ExtArgs>
    student_verification?: boolean | Student$student_verificationArgs<ExtArgs>
  }

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      student_class: Prisma.$Student_classPayload<ExtArgs>
      student_program: Prisma.$Student_programPayload<ExtArgs>
      student_verification: Prisma.$Student_verificationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      nim: string
      email: string
      password: string
      class_id: number
      program_id: number
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFindUniqueArgs>(args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFindFirstArgs>(args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentFindManyArgs>(args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
     */
    create<T extends StudentCreateArgs>(args: SelectSubset<T, StudentCreateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCreateManyArgs>(args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
     */
    delete<T extends StudentDeleteArgs>(args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentUpdateArgs>(args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentDeleteManyArgs>(args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentUpdateManyArgs>(args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
     */
    upsert<T extends StudentUpsertArgs>(args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student_class<T extends Student_classDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Student_classDefaultArgs<ExtArgs>>): Prisma__Student_classClient<$Result.GetResult<Prisma.$Student_classPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    student_program<T extends Student_programDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Student_programDefaultArgs<ExtArgs>>): Prisma__Student_programClient<$Result.GetResult<Prisma.$Student_programPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    student_verification<T extends Student$student_verificationArgs<ExtArgs> = {}>(args?: Subset<T, Student$student_verificationArgs<ExtArgs>>): Prisma__Student_verificationClient<$Result.GetResult<Prisma.$Student_verificationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student model
   */ 
  interface StudentFieldRefs {
    readonly id: FieldRef<"Student", 'String'>
    readonly name: FieldRef<"Student", 'String'>
    readonly nim: FieldRef<"Student", 'String'>
    readonly email: FieldRef<"Student", 'String'>
    readonly password: FieldRef<"Student", 'String'>
    readonly class_id: FieldRef<"Student", 'Int'>
    readonly program_id: FieldRef<"Student", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
  }

  /**
   * Student.student_verification
   */
  export type Student$student_verificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_verification
     */
    select?: Student_verificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_verificationInclude<ExtArgs> | null
    where?: Student_verificationWhereInput
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    level: number | null
  }

  export type AdminSumAggregateOutputType = {
    level: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: string | null
    name: string | null
    password: string | null
    email: string | null
    level: number | null
  }

  export type AdminMaxAggregateOutputType = {
    id: string | null
    name: string | null
    password: string | null
    email: string | null
    level: number | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    name: number
    password: number
    email: number
    level: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    level?: true
  }

  export type AdminSumAggregateInputType = {
    level?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    level?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    level?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    level?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: string
    name: string
    password: string
    email: string
    level: number
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    level?: boolean
  }, ExtArgs["result"]["admin"]>


  export type AdminSelectScalar = {
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    level?: boolean
  }


  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      password: string
      email: string
      level: number
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'String'>
    readonly name: FieldRef<"Admin", 'String'>
    readonly password: FieldRef<"Admin", 'String'>
    readonly email: FieldRef<"Admin", 'String'>
    readonly level: FieldRef<"Admin", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
  }


  /**
   * Model Student_verification
   */

  export type AggregateStudent_verification = {
    _count: Student_verificationCountAggregateOutputType | null
    _min: Student_verificationMinAggregateOutputType | null
    _max: Student_verificationMaxAggregateOutputType | null
  }

  export type Student_verificationMinAggregateOutputType = {
    student_id: string | null
    verification_status: $Enums.verification_status | null
    verification_sent: Date | null
    verification_date: Date | null
  }

  export type Student_verificationMaxAggregateOutputType = {
    student_id: string | null
    verification_status: $Enums.verification_status | null
    verification_sent: Date | null
    verification_date: Date | null
  }

  export type Student_verificationCountAggregateOutputType = {
    student_id: number
    verification_status: number
    verification_sent: number
    verification_date: number
    _all: number
  }


  export type Student_verificationMinAggregateInputType = {
    student_id?: true
    verification_status?: true
    verification_sent?: true
    verification_date?: true
  }

  export type Student_verificationMaxAggregateInputType = {
    student_id?: true
    verification_status?: true
    verification_sent?: true
    verification_date?: true
  }

  export type Student_verificationCountAggregateInputType = {
    student_id?: true
    verification_status?: true
    verification_sent?: true
    verification_date?: true
    _all?: true
  }

  export type Student_verificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student_verification to aggregate.
     */
    where?: Student_verificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student_verifications to fetch.
     */
    orderBy?: Student_verificationOrderByWithRelationInput | Student_verificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Student_verificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student_verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student_verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Student_verifications
    **/
    _count?: true | Student_verificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Student_verificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Student_verificationMaxAggregateInputType
  }

  export type GetStudent_verificationAggregateType<T extends Student_verificationAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent_verification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent_verification[P]>
      : GetScalarType<T[P], AggregateStudent_verification[P]>
  }




  export type Student_verificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Student_verificationWhereInput
    orderBy?: Student_verificationOrderByWithAggregationInput | Student_verificationOrderByWithAggregationInput[]
    by: Student_verificationScalarFieldEnum[] | Student_verificationScalarFieldEnum
    having?: Student_verificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Student_verificationCountAggregateInputType | true
    _min?: Student_verificationMinAggregateInputType
    _max?: Student_verificationMaxAggregateInputType
  }

  export type Student_verificationGroupByOutputType = {
    student_id: string
    verification_status: $Enums.verification_status
    verification_sent: Date
    verification_date: Date | null
    _count: Student_verificationCountAggregateOutputType | null
    _min: Student_verificationMinAggregateOutputType | null
    _max: Student_verificationMaxAggregateOutputType | null
  }

  type GetStudent_verificationGroupByPayload<T extends Student_verificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Student_verificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Student_verificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Student_verificationGroupByOutputType[P]>
            : GetScalarType<T[P], Student_verificationGroupByOutputType[P]>
        }
      >
    >


  export type Student_verificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    student_id?: boolean
    verification_status?: boolean
    verification_sent?: boolean
    verification_date?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student_verification"]>


  export type Student_verificationSelectScalar = {
    student_id?: boolean
    verification_status?: boolean
    verification_sent?: boolean
    verification_date?: boolean
  }

  export type Student_verificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $Student_verificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student_verification"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      student_id: string
      verification_status: $Enums.verification_status
      verification_sent: Date
      verification_date: Date | null
    }, ExtArgs["result"]["student_verification"]>
    composites: {}
  }

  type Student_verificationGetPayload<S extends boolean | null | undefined | Student_verificationDefaultArgs> = $Result.GetResult<Prisma.$Student_verificationPayload, S>

  type Student_verificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Student_verificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Student_verificationCountAggregateInputType | true
    }

  export interface Student_verificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student_verification'], meta: { name: 'Student_verification' } }
    /**
     * Find zero or one Student_verification that matches the filter.
     * @param {Student_verificationFindUniqueArgs} args - Arguments to find a Student_verification
     * @example
     * // Get one Student_verification
     * const student_verification = await prisma.student_verification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Student_verificationFindUniqueArgs>(args: SelectSubset<T, Student_verificationFindUniqueArgs<ExtArgs>>): Prisma__Student_verificationClient<$Result.GetResult<Prisma.$Student_verificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Student_verification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {Student_verificationFindUniqueOrThrowArgs} args - Arguments to find a Student_verification
     * @example
     * // Get one Student_verification
     * const student_verification = await prisma.student_verification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Student_verificationFindUniqueOrThrowArgs>(args: SelectSubset<T, Student_verificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Student_verificationClient<$Result.GetResult<Prisma.$Student_verificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Student_verification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_verificationFindFirstArgs} args - Arguments to find a Student_verification
     * @example
     * // Get one Student_verification
     * const student_verification = await prisma.student_verification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Student_verificationFindFirstArgs>(args?: SelectSubset<T, Student_verificationFindFirstArgs<ExtArgs>>): Prisma__Student_verificationClient<$Result.GetResult<Prisma.$Student_verificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Student_verification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_verificationFindFirstOrThrowArgs} args - Arguments to find a Student_verification
     * @example
     * // Get one Student_verification
     * const student_verification = await prisma.student_verification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Student_verificationFindFirstOrThrowArgs>(args?: SelectSubset<T, Student_verificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__Student_verificationClient<$Result.GetResult<Prisma.$Student_verificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Student_verifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_verificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Student_verifications
     * const student_verifications = await prisma.student_verification.findMany()
     * 
     * // Get first 10 Student_verifications
     * const student_verifications = await prisma.student_verification.findMany({ take: 10 })
     * 
     * // Only select the `student_id`
     * const student_verificationWithStudent_idOnly = await prisma.student_verification.findMany({ select: { student_id: true } })
     * 
     */
    findMany<T extends Student_verificationFindManyArgs>(args?: SelectSubset<T, Student_verificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Student_verificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Student_verification.
     * @param {Student_verificationCreateArgs} args - Arguments to create a Student_verification.
     * @example
     * // Create one Student_verification
     * const Student_verification = await prisma.student_verification.create({
     *   data: {
     *     // ... data to create a Student_verification
     *   }
     * })
     * 
     */
    create<T extends Student_verificationCreateArgs>(args: SelectSubset<T, Student_verificationCreateArgs<ExtArgs>>): Prisma__Student_verificationClient<$Result.GetResult<Prisma.$Student_verificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Student_verifications.
     * @param {Student_verificationCreateManyArgs} args - Arguments to create many Student_verifications.
     * @example
     * // Create many Student_verifications
     * const student_verification = await prisma.student_verification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Student_verificationCreateManyArgs>(args?: SelectSubset<T, Student_verificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Student_verification.
     * @param {Student_verificationDeleteArgs} args - Arguments to delete one Student_verification.
     * @example
     * // Delete one Student_verification
     * const Student_verification = await prisma.student_verification.delete({
     *   where: {
     *     // ... filter to delete one Student_verification
     *   }
     * })
     * 
     */
    delete<T extends Student_verificationDeleteArgs>(args: SelectSubset<T, Student_verificationDeleteArgs<ExtArgs>>): Prisma__Student_verificationClient<$Result.GetResult<Prisma.$Student_verificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Student_verification.
     * @param {Student_verificationUpdateArgs} args - Arguments to update one Student_verification.
     * @example
     * // Update one Student_verification
     * const student_verification = await prisma.student_verification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Student_verificationUpdateArgs>(args: SelectSubset<T, Student_verificationUpdateArgs<ExtArgs>>): Prisma__Student_verificationClient<$Result.GetResult<Prisma.$Student_verificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Student_verifications.
     * @param {Student_verificationDeleteManyArgs} args - Arguments to filter Student_verifications to delete.
     * @example
     * // Delete a few Student_verifications
     * const { count } = await prisma.student_verification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Student_verificationDeleteManyArgs>(args?: SelectSubset<T, Student_verificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Student_verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_verificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Student_verifications
     * const student_verification = await prisma.student_verification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Student_verificationUpdateManyArgs>(args: SelectSubset<T, Student_verificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Student_verification.
     * @param {Student_verificationUpsertArgs} args - Arguments to update or create a Student_verification.
     * @example
     * // Update or create a Student_verification
     * const student_verification = await prisma.student_verification.upsert({
     *   create: {
     *     // ... data to create a Student_verification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student_verification we want to update
     *   }
     * })
     */
    upsert<T extends Student_verificationUpsertArgs>(args: SelectSubset<T, Student_verificationUpsertArgs<ExtArgs>>): Prisma__Student_verificationClient<$Result.GetResult<Prisma.$Student_verificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Student_verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_verificationCountArgs} args - Arguments to filter Student_verifications to count.
     * @example
     * // Count the number of Student_verifications
     * const count = await prisma.student_verification.count({
     *   where: {
     *     // ... the filter for the Student_verifications we want to count
     *   }
     * })
    **/
    count<T extends Student_verificationCountArgs>(
      args?: Subset<T, Student_verificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Student_verificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student_verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_verificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Student_verificationAggregateArgs>(args: Subset<T, Student_verificationAggregateArgs>): Prisma.PrismaPromise<GetStudent_verificationAggregateType<T>>

    /**
     * Group by Student_verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_verificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Student_verificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Student_verificationGroupByArgs['orderBy'] }
        : { orderBy?: Student_verificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Student_verificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudent_verificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student_verification model
   */
  readonly fields: Student_verificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student_verification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Student_verificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student_verification model
   */ 
  interface Student_verificationFieldRefs {
    readonly student_id: FieldRef<"Student_verification", 'String'>
    readonly verification_status: FieldRef<"Student_verification", 'verification_status'>
    readonly verification_sent: FieldRef<"Student_verification", 'DateTime'>
    readonly verification_date: FieldRef<"Student_verification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Student_verification findUnique
   */
  export type Student_verificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_verification
     */
    select?: Student_verificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_verificationInclude<ExtArgs> | null
    /**
     * Filter, which Student_verification to fetch.
     */
    where: Student_verificationWhereUniqueInput
  }

  /**
   * Student_verification findUniqueOrThrow
   */
  export type Student_verificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_verification
     */
    select?: Student_verificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_verificationInclude<ExtArgs> | null
    /**
     * Filter, which Student_verification to fetch.
     */
    where: Student_verificationWhereUniqueInput
  }

  /**
   * Student_verification findFirst
   */
  export type Student_verificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_verification
     */
    select?: Student_verificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_verificationInclude<ExtArgs> | null
    /**
     * Filter, which Student_verification to fetch.
     */
    where?: Student_verificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student_verifications to fetch.
     */
    orderBy?: Student_verificationOrderByWithRelationInput | Student_verificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Student_verifications.
     */
    cursor?: Student_verificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student_verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student_verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Student_verifications.
     */
    distinct?: Student_verificationScalarFieldEnum | Student_verificationScalarFieldEnum[]
  }

  /**
   * Student_verification findFirstOrThrow
   */
  export type Student_verificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_verification
     */
    select?: Student_verificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_verificationInclude<ExtArgs> | null
    /**
     * Filter, which Student_verification to fetch.
     */
    where?: Student_verificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student_verifications to fetch.
     */
    orderBy?: Student_verificationOrderByWithRelationInput | Student_verificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Student_verifications.
     */
    cursor?: Student_verificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student_verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student_verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Student_verifications.
     */
    distinct?: Student_verificationScalarFieldEnum | Student_verificationScalarFieldEnum[]
  }

  /**
   * Student_verification findMany
   */
  export type Student_verificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_verification
     */
    select?: Student_verificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_verificationInclude<ExtArgs> | null
    /**
     * Filter, which Student_verifications to fetch.
     */
    where?: Student_verificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student_verifications to fetch.
     */
    orderBy?: Student_verificationOrderByWithRelationInput | Student_verificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Student_verifications.
     */
    cursor?: Student_verificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student_verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student_verifications.
     */
    skip?: number
    distinct?: Student_verificationScalarFieldEnum | Student_verificationScalarFieldEnum[]
  }

  /**
   * Student_verification create
   */
  export type Student_verificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_verification
     */
    select?: Student_verificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_verificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Student_verification.
     */
    data: XOR<Student_verificationCreateInput, Student_verificationUncheckedCreateInput>
  }

  /**
   * Student_verification createMany
   */
  export type Student_verificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Student_verifications.
     */
    data: Student_verificationCreateManyInput | Student_verificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student_verification update
   */
  export type Student_verificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_verification
     */
    select?: Student_verificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_verificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Student_verification.
     */
    data: XOR<Student_verificationUpdateInput, Student_verificationUncheckedUpdateInput>
    /**
     * Choose, which Student_verification to update.
     */
    where: Student_verificationWhereUniqueInput
  }

  /**
   * Student_verification updateMany
   */
  export type Student_verificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Student_verifications.
     */
    data: XOR<Student_verificationUpdateManyMutationInput, Student_verificationUncheckedUpdateManyInput>
    /**
     * Filter which Student_verifications to update
     */
    where?: Student_verificationWhereInput
  }

  /**
   * Student_verification upsert
   */
  export type Student_verificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_verification
     */
    select?: Student_verificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_verificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Student_verification to update in case it exists.
     */
    where: Student_verificationWhereUniqueInput
    /**
     * In case the Student_verification found by the `where` argument doesn't exist, create a new Student_verification with this data.
     */
    create: XOR<Student_verificationCreateInput, Student_verificationUncheckedCreateInput>
    /**
     * In case the Student_verification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Student_verificationUpdateInput, Student_verificationUncheckedUpdateInput>
  }

  /**
   * Student_verification delete
   */
  export type Student_verificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_verification
     */
    select?: Student_verificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_verificationInclude<ExtArgs> | null
    /**
     * Filter which Student_verification to delete.
     */
    where: Student_verificationWhereUniqueInput
  }

  /**
   * Student_verification deleteMany
   */
  export type Student_verificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student_verifications to delete
     */
    where?: Student_verificationWhereInput
  }

  /**
   * Student_verification without action
   */
  export type Student_verificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student_verification
     */
    select?: Student_verificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student_verificationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Student_programScalarFieldEnum: {
    program_id: 'program_id',
    program_name: 'program_name'
  };

  export type Student_programScalarFieldEnum = (typeof Student_programScalarFieldEnum)[keyof typeof Student_programScalarFieldEnum]


  export const Student_classScalarFieldEnum: {
    class_id: 'class_id',
    class_name: 'class_name'
  };

  export type Student_classScalarFieldEnum = (typeof Student_classScalarFieldEnum)[keyof typeof Student_classScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    nim: 'nim',
    email: 'email',
    password: 'password',
    class_id: 'class_id',
    program_id: 'program_id'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    id: 'id',
    name: 'name',
    password: 'password',
    email: 'email',
    level: 'level'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const Student_verificationScalarFieldEnum: {
    student_id: 'student_id',
    verification_status: 'verification_status',
    verification_sent: 'verification_sent',
    verification_date: 'verification_date'
  };

  export type Student_verificationScalarFieldEnum = (typeof Student_verificationScalarFieldEnum)[keyof typeof Student_verificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'verification_status'
   */
  export type Enumverification_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'verification_status'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type Student_programWhereInput = {
    AND?: Student_programWhereInput | Student_programWhereInput[]
    OR?: Student_programWhereInput[]
    NOT?: Student_programWhereInput | Student_programWhereInput[]
    program_id?: IntFilter<"Student_program"> | number
    program_name?: StringFilter<"Student_program"> | string
    student?: StudentListRelationFilter
  }

  export type Student_programOrderByWithRelationInput = {
    program_id?: SortOrder
    program_name?: SortOrder
    student?: StudentOrderByRelationAggregateInput
  }

  export type Student_programWhereUniqueInput = Prisma.AtLeast<{
    program_id?: number
    program_name?: string
    AND?: Student_programWhereInput | Student_programWhereInput[]
    OR?: Student_programWhereInput[]
    NOT?: Student_programWhereInput | Student_programWhereInput[]
    student?: StudentListRelationFilter
  }, "program_id" | "program_name">

  export type Student_programOrderByWithAggregationInput = {
    program_id?: SortOrder
    program_name?: SortOrder
    _count?: Student_programCountOrderByAggregateInput
    _avg?: Student_programAvgOrderByAggregateInput
    _max?: Student_programMaxOrderByAggregateInput
    _min?: Student_programMinOrderByAggregateInput
    _sum?: Student_programSumOrderByAggregateInput
  }

  export type Student_programScalarWhereWithAggregatesInput = {
    AND?: Student_programScalarWhereWithAggregatesInput | Student_programScalarWhereWithAggregatesInput[]
    OR?: Student_programScalarWhereWithAggregatesInput[]
    NOT?: Student_programScalarWhereWithAggregatesInput | Student_programScalarWhereWithAggregatesInput[]
    program_id?: IntWithAggregatesFilter<"Student_program"> | number
    program_name?: StringWithAggregatesFilter<"Student_program"> | string
  }

  export type Student_classWhereInput = {
    AND?: Student_classWhereInput | Student_classWhereInput[]
    OR?: Student_classWhereInput[]
    NOT?: Student_classWhereInput | Student_classWhereInput[]
    class_id?: IntFilter<"Student_class"> | number
    class_name?: StringFilter<"Student_class"> | string
    student?: StudentListRelationFilter
  }

  export type Student_classOrderByWithRelationInput = {
    class_id?: SortOrder
    class_name?: SortOrder
    student?: StudentOrderByRelationAggregateInput
  }

  export type Student_classWhereUniqueInput = Prisma.AtLeast<{
    class_id?: number
    class_name?: string
    AND?: Student_classWhereInput | Student_classWhereInput[]
    OR?: Student_classWhereInput[]
    NOT?: Student_classWhereInput | Student_classWhereInput[]
    student?: StudentListRelationFilter
  }, "class_id" | "class_name">

  export type Student_classOrderByWithAggregationInput = {
    class_id?: SortOrder
    class_name?: SortOrder
    _count?: Student_classCountOrderByAggregateInput
    _avg?: Student_classAvgOrderByAggregateInput
    _max?: Student_classMaxOrderByAggregateInput
    _min?: Student_classMinOrderByAggregateInput
    _sum?: Student_classSumOrderByAggregateInput
  }

  export type Student_classScalarWhereWithAggregatesInput = {
    AND?: Student_classScalarWhereWithAggregatesInput | Student_classScalarWhereWithAggregatesInput[]
    OR?: Student_classScalarWhereWithAggregatesInput[]
    NOT?: Student_classScalarWhereWithAggregatesInput | Student_classScalarWhereWithAggregatesInput[]
    class_id?: IntWithAggregatesFilter<"Student_class"> | number
    class_name?: StringWithAggregatesFilter<"Student_class"> | string
  }

  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    id?: StringFilter<"Student"> | string
    name?: StringFilter<"Student"> | string
    nim?: StringFilter<"Student"> | string
    email?: StringFilter<"Student"> | string
    password?: StringFilter<"Student"> | string
    class_id?: IntFilter<"Student"> | number
    program_id?: IntFilter<"Student"> | number
    student_class?: XOR<Student_classRelationFilter, Student_classWhereInput>
    student_program?: XOR<Student_programRelationFilter, Student_programWhereInput>
    student_verification?: XOR<Student_verificationNullableRelationFilter, Student_verificationWhereInput> | null
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    nim?: SortOrder
    email?: SortOrder
    password?: SortOrder
    class_id?: SortOrder
    program_id?: SortOrder
    student_class?: Student_classOrderByWithRelationInput
    student_program?: Student_programOrderByWithRelationInput
    student_verification?: Student_verificationOrderByWithRelationInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    nim?: string
    email?: string
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    name?: StringFilter<"Student"> | string
    password?: StringFilter<"Student"> | string
    class_id?: IntFilter<"Student"> | number
    program_id?: IntFilter<"Student"> | number
    student_class?: XOR<Student_classRelationFilter, Student_classWhereInput>
    student_program?: XOR<Student_programRelationFilter, Student_programWhereInput>
    student_verification?: XOR<Student_verificationNullableRelationFilter, Student_verificationWhereInput> | null
  }, "id" | "nim" | "email">

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    nim?: SortOrder
    email?: SortOrder
    password?: SortOrder
    class_id?: SortOrder
    program_id?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Student"> | string
    name?: StringWithAggregatesFilter<"Student"> | string
    nim?: StringWithAggregatesFilter<"Student"> | string
    email?: StringWithAggregatesFilter<"Student"> | string
    password?: StringWithAggregatesFilter<"Student"> | string
    class_id?: IntWithAggregatesFilter<"Student"> | number
    program_id?: IntWithAggregatesFilter<"Student"> | number
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: StringFilter<"Admin"> | string
    name?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    email?: StringFilter<"Admin"> | string
    level?: IntFilter<"Admin"> | number
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    level?: SortOrder
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    name?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    level?: IntFilter<"Admin"> | number
  }, "id" | "email">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    level?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Admin"> | string
    name?: StringWithAggregatesFilter<"Admin"> | string
    password?: StringWithAggregatesFilter<"Admin"> | string
    email?: StringWithAggregatesFilter<"Admin"> | string
    level?: IntWithAggregatesFilter<"Admin"> | number
  }

  export type Student_verificationWhereInput = {
    AND?: Student_verificationWhereInput | Student_verificationWhereInput[]
    OR?: Student_verificationWhereInput[]
    NOT?: Student_verificationWhereInput | Student_verificationWhereInput[]
    student_id?: StringFilter<"Student_verification"> | string
    verification_status?: Enumverification_statusFilter<"Student_verification"> | $Enums.verification_status
    verification_sent?: DateTimeFilter<"Student_verification"> | Date | string
    verification_date?: DateTimeNullableFilter<"Student_verification"> | Date | string | null
    student?: XOR<StudentRelationFilter, StudentWhereInput>
  }

  export type Student_verificationOrderByWithRelationInput = {
    student_id?: SortOrder
    verification_status?: SortOrder
    verification_sent?: SortOrder
    verification_date?: SortOrderInput | SortOrder
    student?: StudentOrderByWithRelationInput
  }

  export type Student_verificationWhereUniqueInput = Prisma.AtLeast<{
    student_id?: string
    AND?: Student_verificationWhereInput | Student_verificationWhereInput[]
    OR?: Student_verificationWhereInput[]
    NOT?: Student_verificationWhereInput | Student_verificationWhereInput[]
    verification_status?: Enumverification_statusFilter<"Student_verification"> | $Enums.verification_status
    verification_sent?: DateTimeFilter<"Student_verification"> | Date | string
    verification_date?: DateTimeNullableFilter<"Student_verification"> | Date | string | null
    student?: XOR<StudentRelationFilter, StudentWhereInput>
  }, "student_id">

  export type Student_verificationOrderByWithAggregationInput = {
    student_id?: SortOrder
    verification_status?: SortOrder
    verification_sent?: SortOrder
    verification_date?: SortOrderInput | SortOrder
    _count?: Student_verificationCountOrderByAggregateInput
    _max?: Student_verificationMaxOrderByAggregateInput
    _min?: Student_verificationMinOrderByAggregateInput
  }

  export type Student_verificationScalarWhereWithAggregatesInput = {
    AND?: Student_verificationScalarWhereWithAggregatesInput | Student_verificationScalarWhereWithAggregatesInput[]
    OR?: Student_verificationScalarWhereWithAggregatesInput[]
    NOT?: Student_verificationScalarWhereWithAggregatesInput | Student_verificationScalarWhereWithAggregatesInput[]
    student_id?: StringWithAggregatesFilter<"Student_verification"> | string
    verification_status?: Enumverification_statusWithAggregatesFilter<"Student_verification"> | $Enums.verification_status
    verification_sent?: DateTimeWithAggregatesFilter<"Student_verification"> | Date | string
    verification_date?: DateTimeNullableWithAggregatesFilter<"Student_verification"> | Date | string | null
  }

  export type Student_programCreateInput = {
    program_name: string
    student?: StudentCreateNestedManyWithoutStudent_programInput
  }

  export type Student_programUncheckedCreateInput = {
    program_id?: number
    program_name: string
    student?: StudentUncheckedCreateNestedManyWithoutStudent_programInput
  }

  export type Student_programUpdateInput = {
    program_name?: StringFieldUpdateOperationsInput | string
    student?: StudentUpdateManyWithoutStudent_programNestedInput
  }

  export type Student_programUncheckedUpdateInput = {
    program_id?: IntFieldUpdateOperationsInput | number
    program_name?: StringFieldUpdateOperationsInput | string
    student?: StudentUncheckedUpdateManyWithoutStudent_programNestedInput
  }

  export type Student_programCreateManyInput = {
    program_id?: number
    program_name: string
  }

  export type Student_programUpdateManyMutationInput = {
    program_name?: StringFieldUpdateOperationsInput | string
  }

  export type Student_programUncheckedUpdateManyInput = {
    program_id?: IntFieldUpdateOperationsInput | number
    program_name?: StringFieldUpdateOperationsInput | string
  }

  export type Student_classCreateInput = {
    class_name: string
    student?: StudentCreateNestedManyWithoutStudent_classInput
  }

  export type Student_classUncheckedCreateInput = {
    class_id?: number
    class_name: string
    student?: StudentUncheckedCreateNestedManyWithoutStudent_classInput
  }

  export type Student_classUpdateInput = {
    class_name?: StringFieldUpdateOperationsInput | string
    student?: StudentUpdateManyWithoutStudent_classNestedInput
  }

  export type Student_classUncheckedUpdateInput = {
    class_id?: IntFieldUpdateOperationsInput | number
    class_name?: StringFieldUpdateOperationsInput | string
    student?: StudentUncheckedUpdateManyWithoutStudent_classNestedInput
  }

  export type Student_classCreateManyInput = {
    class_id?: number
    class_name: string
  }

  export type Student_classUpdateManyMutationInput = {
    class_name?: StringFieldUpdateOperationsInput | string
  }

  export type Student_classUncheckedUpdateManyInput = {
    class_id?: IntFieldUpdateOperationsInput | number
    class_name?: StringFieldUpdateOperationsInput | string
  }

  export type StudentCreateInput = {
    id?: string
    name: string
    nim: string
    email: string
    password: string
    student_class: Student_classCreateNestedOneWithoutStudentInput
    student_program: Student_programCreateNestedOneWithoutStudentInput
    student_verification?: Student_verificationCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    id?: string
    name: string
    nim: string
    email: string
    password: string
    class_id: number
    program_id: number
    student_verification?: Student_verificationUncheckedCreateNestedOneWithoutStudentInput
  }

  export type StudentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    student_class?: Student_classUpdateOneRequiredWithoutStudentNestedInput
    student_program?: Student_programUpdateOneRequiredWithoutStudentNestedInput
    student_verification?: Student_verificationUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
    program_id?: IntFieldUpdateOperationsInput | number
    student_verification?: Student_verificationUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    id?: string
    name: string
    nim: string
    email: string
    password: string
    class_id: number
    program_id: number
  }

  export type StudentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type StudentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
    program_id?: IntFieldUpdateOperationsInput | number
  }

  export type AdminCreateInput = {
    id?: string
    name: string
    password: string
    email: string
    level: number
  }

  export type AdminUncheckedCreateInput = {
    id?: string
    name: string
    password: string
    email: string
    level: number
  }

  export type AdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
  }

  export type AdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
  }

  export type AdminCreateManyInput = {
    id?: string
    name: string
    password: string
    email: string
    level: number
  }

  export type AdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
  }

  export type Student_verificationCreateInput = {
    verification_status?: $Enums.verification_status
    verification_sent?: Date | string
    verification_date?: Date | string | null
    student: StudentCreateNestedOneWithoutStudent_verificationInput
  }

  export type Student_verificationUncheckedCreateInput = {
    student_id: string
    verification_status?: $Enums.verification_status
    verification_sent?: Date | string
    verification_date?: Date | string | null
  }

  export type Student_verificationUpdateInput = {
    verification_status?: Enumverification_statusFieldUpdateOperationsInput | $Enums.verification_status
    verification_sent?: DateTimeFieldUpdateOperationsInput | Date | string
    verification_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    student?: StudentUpdateOneRequiredWithoutStudent_verificationNestedInput
  }

  export type Student_verificationUncheckedUpdateInput = {
    student_id?: StringFieldUpdateOperationsInput | string
    verification_status?: Enumverification_statusFieldUpdateOperationsInput | $Enums.verification_status
    verification_sent?: DateTimeFieldUpdateOperationsInput | Date | string
    verification_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Student_verificationCreateManyInput = {
    student_id: string
    verification_status?: $Enums.verification_status
    verification_sent?: Date | string
    verification_date?: Date | string | null
  }

  export type Student_verificationUpdateManyMutationInput = {
    verification_status?: Enumverification_statusFieldUpdateOperationsInput | $Enums.verification_status
    verification_sent?: DateTimeFieldUpdateOperationsInput | Date | string
    verification_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Student_verificationUncheckedUpdateManyInput = {
    student_id?: StringFieldUpdateOperationsInput | string
    verification_status?: Enumverification_statusFieldUpdateOperationsInput | $Enums.verification_status
    verification_sent?: DateTimeFieldUpdateOperationsInput | Date | string
    verification_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Student_programCountOrderByAggregateInput = {
    program_id?: SortOrder
    program_name?: SortOrder
  }

  export type Student_programAvgOrderByAggregateInput = {
    program_id?: SortOrder
  }

  export type Student_programMaxOrderByAggregateInput = {
    program_id?: SortOrder
    program_name?: SortOrder
  }

  export type Student_programMinOrderByAggregateInput = {
    program_id?: SortOrder
    program_name?: SortOrder
  }

  export type Student_programSumOrderByAggregateInput = {
    program_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type Student_classCountOrderByAggregateInput = {
    class_id?: SortOrder
    class_name?: SortOrder
  }

  export type Student_classAvgOrderByAggregateInput = {
    class_id?: SortOrder
  }

  export type Student_classMaxOrderByAggregateInput = {
    class_id?: SortOrder
    class_name?: SortOrder
  }

  export type Student_classMinOrderByAggregateInput = {
    class_id?: SortOrder
    class_name?: SortOrder
  }

  export type Student_classSumOrderByAggregateInput = {
    class_id?: SortOrder
  }

  export type Student_classRelationFilter = {
    is?: Student_classWhereInput
    isNot?: Student_classWhereInput
  }

  export type Student_programRelationFilter = {
    is?: Student_programWhereInput
    isNot?: Student_programWhereInput
  }

  export type Student_verificationNullableRelationFilter = {
    is?: Student_verificationWhereInput | null
    isNot?: Student_verificationWhereInput | null
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nim?: SortOrder
    email?: SortOrder
    password?: SortOrder
    class_id?: SortOrder
    program_id?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    class_id?: SortOrder
    program_id?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nim?: SortOrder
    email?: SortOrder
    password?: SortOrder
    class_id?: SortOrder
    program_id?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nim?: SortOrder
    email?: SortOrder
    password?: SortOrder
    class_id?: SortOrder
    program_id?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    class_id?: SortOrder
    program_id?: SortOrder
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    level?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    level?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    level?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    level?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    level?: SortOrder
  }

  export type Enumverification_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.verification_status | Enumverification_statusFieldRefInput<$PrismaModel>
    in?: $Enums.verification_status[]
    notIn?: $Enums.verification_status[]
    not?: NestedEnumverification_statusFilter<$PrismaModel> | $Enums.verification_status
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StudentRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type Student_verificationCountOrderByAggregateInput = {
    student_id?: SortOrder
    verification_status?: SortOrder
    verification_sent?: SortOrder
    verification_date?: SortOrder
  }

  export type Student_verificationMaxOrderByAggregateInput = {
    student_id?: SortOrder
    verification_status?: SortOrder
    verification_sent?: SortOrder
    verification_date?: SortOrder
  }

  export type Student_verificationMinOrderByAggregateInput = {
    student_id?: SortOrder
    verification_status?: SortOrder
    verification_sent?: SortOrder
    verification_date?: SortOrder
  }

  export type Enumverification_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.verification_status | Enumverification_statusFieldRefInput<$PrismaModel>
    in?: $Enums.verification_status[]
    notIn?: $Enums.verification_status[]
    not?: NestedEnumverification_statusWithAggregatesFilter<$PrismaModel> | $Enums.verification_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumverification_statusFilter<$PrismaModel>
    _max?: NestedEnumverification_statusFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StudentCreateNestedManyWithoutStudent_programInput = {
    create?: XOR<StudentCreateWithoutStudent_programInput, StudentUncheckedCreateWithoutStudent_programInput> | StudentCreateWithoutStudent_programInput[] | StudentUncheckedCreateWithoutStudent_programInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutStudent_programInput | StudentCreateOrConnectWithoutStudent_programInput[]
    createMany?: StudentCreateManyStudent_programInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutStudent_programInput = {
    create?: XOR<StudentCreateWithoutStudent_programInput, StudentUncheckedCreateWithoutStudent_programInput> | StudentCreateWithoutStudent_programInput[] | StudentUncheckedCreateWithoutStudent_programInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutStudent_programInput | StudentCreateOrConnectWithoutStudent_programInput[]
    createMany?: StudentCreateManyStudent_programInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type StudentUpdateManyWithoutStudent_programNestedInput = {
    create?: XOR<StudentCreateWithoutStudent_programInput, StudentUncheckedCreateWithoutStudent_programInput> | StudentCreateWithoutStudent_programInput[] | StudentUncheckedCreateWithoutStudent_programInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutStudent_programInput | StudentCreateOrConnectWithoutStudent_programInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutStudent_programInput | StudentUpsertWithWhereUniqueWithoutStudent_programInput[]
    createMany?: StudentCreateManyStudent_programInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutStudent_programInput | StudentUpdateWithWhereUniqueWithoutStudent_programInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutStudent_programInput | StudentUpdateManyWithWhereWithoutStudent_programInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StudentUncheckedUpdateManyWithoutStudent_programNestedInput = {
    create?: XOR<StudentCreateWithoutStudent_programInput, StudentUncheckedCreateWithoutStudent_programInput> | StudentCreateWithoutStudent_programInput[] | StudentUncheckedCreateWithoutStudent_programInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutStudent_programInput | StudentCreateOrConnectWithoutStudent_programInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutStudent_programInput | StudentUpsertWithWhereUniqueWithoutStudent_programInput[]
    createMany?: StudentCreateManyStudent_programInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutStudent_programInput | StudentUpdateWithWhereUniqueWithoutStudent_programInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutStudent_programInput | StudentUpdateManyWithWhereWithoutStudent_programInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type StudentCreateNestedManyWithoutStudent_classInput = {
    create?: XOR<StudentCreateWithoutStudent_classInput, StudentUncheckedCreateWithoutStudent_classInput> | StudentCreateWithoutStudent_classInput[] | StudentUncheckedCreateWithoutStudent_classInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutStudent_classInput | StudentCreateOrConnectWithoutStudent_classInput[]
    createMany?: StudentCreateManyStudent_classInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutStudent_classInput = {
    create?: XOR<StudentCreateWithoutStudent_classInput, StudentUncheckedCreateWithoutStudent_classInput> | StudentCreateWithoutStudent_classInput[] | StudentUncheckedCreateWithoutStudent_classInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutStudent_classInput | StudentCreateOrConnectWithoutStudent_classInput[]
    createMany?: StudentCreateManyStudent_classInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type StudentUpdateManyWithoutStudent_classNestedInput = {
    create?: XOR<StudentCreateWithoutStudent_classInput, StudentUncheckedCreateWithoutStudent_classInput> | StudentCreateWithoutStudent_classInput[] | StudentUncheckedCreateWithoutStudent_classInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutStudent_classInput | StudentCreateOrConnectWithoutStudent_classInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutStudent_classInput | StudentUpsertWithWhereUniqueWithoutStudent_classInput[]
    createMany?: StudentCreateManyStudent_classInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutStudent_classInput | StudentUpdateWithWhereUniqueWithoutStudent_classInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutStudent_classInput | StudentUpdateManyWithWhereWithoutStudent_classInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutStudent_classNestedInput = {
    create?: XOR<StudentCreateWithoutStudent_classInput, StudentUncheckedCreateWithoutStudent_classInput> | StudentCreateWithoutStudent_classInput[] | StudentUncheckedCreateWithoutStudent_classInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutStudent_classInput | StudentCreateOrConnectWithoutStudent_classInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutStudent_classInput | StudentUpsertWithWhereUniqueWithoutStudent_classInput[]
    createMany?: StudentCreateManyStudent_classInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutStudent_classInput | StudentUpdateWithWhereUniqueWithoutStudent_classInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutStudent_classInput | StudentUpdateManyWithWhereWithoutStudent_classInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type Student_classCreateNestedOneWithoutStudentInput = {
    create?: XOR<Student_classCreateWithoutStudentInput, Student_classUncheckedCreateWithoutStudentInput>
    connectOrCreate?: Student_classCreateOrConnectWithoutStudentInput
    connect?: Student_classWhereUniqueInput
  }

  export type Student_programCreateNestedOneWithoutStudentInput = {
    create?: XOR<Student_programCreateWithoutStudentInput, Student_programUncheckedCreateWithoutStudentInput>
    connectOrCreate?: Student_programCreateOrConnectWithoutStudentInput
    connect?: Student_programWhereUniqueInput
  }

  export type Student_verificationCreateNestedOneWithoutStudentInput = {
    create?: XOR<Student_verificationCreateWithoutStudentInput, Student_verificationUncheckedCreateWithoutStudentInput>
    connectOrCreate?: Student_verificationCreateOrConnectWithoutStudentInput
    connect?: Student_verificationWhereUniqueInput
  }

  export type Student_verificationUncheckedCreateNestedOneWithoutStudentInput = {
    create?: XOR<Student_verificationCreateWithoutStudentInput, Student_verificationUncheckedCreateWithoutStudentInput>
    connectOrCreate?: Student_verificationCreateOrConnectWithoutStudentInput
    connect?: Student_verificationWhereUniqueInput
  }

  export type Student_classUpdateOneRequiredWithoutStudentNestedInput = {
    create?: XOR<Student_classCreateWithoutStudentInput, Student_classUncheckedCreateWithoutStudentInput>
    connectOrCreate?: Student_classCreateOrConnectWithoutStudentInput
    upsert?: Student_classUpsertWithoutStudentInput
    connect?: Student_classWhereUniqueInput
    update?: XOR<XOR<Student_classUpdateToOneWithWhereWithoutStudentInput, Student_classUpdateWithoutStudentInput>, Student_classUncheckedUpdateWithoutStudentInput>
  }

  export type Student_programUpdateOneRequiredWithoutStudentNestedInput = {
    create?: XOR<Student_programCreateWithoutStudentInput, Student_programUncheckedCreateWithoutStudentInput>
    connectOrCreate?: Student_programCreateOrConnectWithoutStudentInput
    upsert?: Student_programUpsertWithoutStudentInput
    connect?: Student_programWhereUniqueInput
    update?: XOR<XOR<Student_programUpdateToOneWithWhereWithoutStudentInput, Student_programUpdateWithoutStudentInput>, Student_programUncheckedUpdateWithoutStudentInput>
  }

  export type Student_verificationUpdateOneWithoutStudentNestedInput = {
    create?: XOR<Student_verificationCreateWithoutStudentInput, Student_verificationUncheckedCreateWithoutStudentInput>
    connectOrCreate?: Student_verificationCreateOrConnectWithoutStudentInput
    upsert?: Student_verificationUpsertWithoutStudentInput
    disconnect?: Student_verificationWhereInput | boolean
    delete?: Student_verificationWhereInput | boolean
    connect?: Student_verificationWhereUniqueInput
    update?: XOR<XOR<Student_verificationUpdateToOneWithWhereWithoutStudentInput, Student_verificationUpdateWithoutStudentInput>, Student_verificationUncheckedUpdateWithoutStudentInput>
  }

  export type Student_verificationUncheckedUpdateOneWithoutStudentNestedInput = {
    create?: XOR<Student_verificationCreateWithoutStudentInput, Student_verificationUncheckedCreateWithoutStudentInput>
    connectOrCreate?: Student_verificationCreateOrConnectWithoutStudentInput
    upsert?: Student_verificationUpsertWithoutStudentInput
    disconnect?: Student_verificationWhereInput | boolean
    delete?: Student_verificationWhereInput | boolean
    connect?: Student_verificationWhereUniqueInput
    update?: XOR<XOR<Student_verificationUpdateToOneWithWhereWithoutStudentInput, Student_verificationUpdateWithoutStudentInput>, Student_verificationUncheckedUpdateWithoutStudentInput>
  }

  export type StudentCreateNestedOneWithoutStudent_verificationInput = {
    create?: XOR<StudentCreateWithoutStudent_verificationInput, StudentUncheckedCreateWithoutStudent_verificationInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudent_verificationInput
    connect?: StudentWhereUniqueInput
  }

  export type Enumverification_statusFieldUpdateOperationsInput = {
    set?: $Enums.verification_status
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type StudentUpdateOneRequiredWithoutStudent_verificationNestedInput = {
    create?: XOR<StudentCreateWithoutStudent_verificationInput, StudentUncheckedCreateWithoutStudent_verificationInput>
    connectOrCreate?: StudentCreateOrConnectWithoutStudent_verificationInput
    upsert?: StudentUpsertWithoutStudent_verificationInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutStudent_verificationInput, StudentUpdateWithoutStudent_verificationInput>, StudentUncheckedUpdateWithoutStudent_verificationInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumverification_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.verification_status | Enumverification_statusFieldRefInput<$PrismaModel>
    in?: $Enums.verification_status[]
    notIn?: $Enums.verification_status[]
    not?: NestedEnumverification_statusFilter<$PrismaModel> | $Enums.verification_status
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumverification_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.verification_status | Enumverification_statusFieldRefInput<$PrismaModel>
    in?: $Enums.verification_status[]
    notIn?: $Enums.verification_status[]
    not?: NestedEnumverification_statusWithAggregatesFilter<$PrismaModel> | $Enums.verification_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumverification_statusFilter<$PrismaModel>
    _max?: NestedEnumverification_statusFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StudentCreateWithoutStudent_programInput = {
    id?: string
    name: string
    nim: string
    email: string
    password: string
    student_class: Student_classCreateNestedOneWithoutStudentInput
    student_verification?: Student_verificationCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutStudent_programInput = {
    id?: string
    name: string
    nim: string
    email: string
    password: string
    class_id: number
    student_verification?: Student_verificationUncheckedCreateNestedOneWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutStudent_programInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutStudent_programInput, StudentUncheckedCreateWithoutStudent_programInput>
  }

  export type StudentCreateManyStudent_programInputEnvelope = {
    data: StudentCreateManyStudent_programInput | StudentCreateManyStudent_programInput[]
    skipDuplicates?: boolean
  }

  export type StudentUpsertWithWhereUniqueWithoutStudent_programInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutStudent_programInput, StudentUncheckedUpdateWithoutStudent_programInput>
    create: XOR<StudentCreateWithoutStudent_programInput, StudentUncheckedCreateWithoutStudent_programInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutStudent_programInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutStudent_programInput, StudentUncheckedUpdateWithoutStudent_programInput>
  }

  export type StudentUpdateManyWithWhereWithoutStudent_programInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutStudent_programInput>
  }

  export type StudentScalarWhereInput = {
    AND?: StudentScalarWhereInput | StudentScalarWhereInput[]
    OR?: StudentScalarWhereInput[]
    NOT?: StudentScalarWhereInput | StudentScalarWhereInput[]
    id?: StringFilter<"Student"> | string
    name?: StringFilter<"Student"> | string
    nim?: StringFilter<"Student"> | string
    email?: StringFilter<"Student"> | string
    password?: StringFilter<"Student"> | string
    class_id?: IntFilter<"Student"> | number
    program_id?: IntFilter<"Student"> | number
  }

  export type StudentCreateWithoutStudent_classInput = {
    id?: string
    name: string
    nim: string
    email: string
    password: string
    student_program: Student_programCreateNestedOneWithoutStudentInput
    student_verification?: Student_verificationCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutStudent_classInput = {
    id?: string
    name: string
    nim: string
    email: string
    password: string
    program_id: number
    student_verification?: Student_verificationUncheckedCreateNestedOneWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutStudent_classInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutStudent_classInput, StudentUncheckedCreateWithoutStudent_classInput>
  }

  export type StudentCreateManyStudent_classInputEnvelope = {
    data: StudentCreateManyStudent_classInput | StudentCreateManyStudent_classInput[]
    skipDuplicates?: boolean
  }

  export type StudentUpsertWithWhereUniqueWithoutStudent_classInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutStudent_classInput, StudentUncheckedUpdateWithoutStudent_classInput>
    create: XOR<StudentCreateWithoutStudent_classInput, StudentUncheckedCreateWithoutStudent_classInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutStudent_classInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutStudent_classInput, StudentUncheckedUpdateWithoutStudent_classInput>
  }

  export type StudentUpdateManyWithWhereWithoutStudent_classInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutStudent_classInput>
  }

  export type Student_classCreateWithoutStudentInput = {
    class_name: string
  }

  export type Student_classUncheckedCreateWithoutStudentInput = {
    class_id?: number
    class_name: string
  }

  export type Student_classCreateOrConnectWithoutStudentInput = {
    where: Student_classWhereUniqueInput
    create: XOR<Student_classCreateWithoutStudentInput, Student_classUncheckedCreateWithoutStudentInput>
  }

  export type Student_programCreateWithoutStudentInput = {
    program_name: string
  }

  export type Student_programUncheckedCreateWithoutStudentInput = {
    program_id?: number
    program_name: string
  }

  export type Student_programCreateOrConnectWithoutStudentInput = {
    where: Student_programWhereUniqueInput
    create: XOR<Student_programCreateWithoutStudentInput, Student_programUncheckedCreateWithoutStudentInput>
  }

  export type Student_verificationCreateWithoutStudentInput = {
    verification_status?: $Enums.verification_status
    verification_sent?: Date | string
    verification_date?: Date | string | null
  }

  export type Student_verificationUncheckedCreateWithoutStudentInput = {
    verification_status?: $Enums.verification_status
    verification_sent?: Date | string
    verification_date?: Date | string | null
  }

  export type Student_verificationCreateOrConnectWithoutStudentInput = {
    where: Student_verificationWhereUniqueInput
    create: XOR<Student_verificationCreateWithoutStudentInput, Student_verificationUncheckedCreateWithoutStudentInput>
  }

  export type Student_classUpsertWithoutStudentInput = {
    update: XOR<Student_classUpdateWithoutStudentInput, Student_classUncheckedUpdateWithoutStudentInput>
    create: XOR<Student_classCreateWithoutStudentInput, Student_classUncheckedCreateWithoutStudentInput>
    where?: Student_classWhereInput
  }

  export type Student_classUpdateToOneWithWhereWithoutStudentInput = {
    where?: Student_classWhereInput
    data: XOR<Student_classUpdateWithoutStudentInput, Student_classUncheckedUpdateWithoutStudentInput>
  }

  export type Student_classUpdateWithoutStudentInput = {
    class_name?: StringFieldUpdateOperationsInput | string
  }

  export type Student_classUncheckedUpdateWithoutStudentInput = {
    class_id?: IntFieldUpdateOperationsInput | number
    class_name?: StringFieldUpdateOperationsInput | string
  }

  export type Student_programUpsertWithoutStudentInput = {
    update: XOR<Student_programUpdateWithoutStudentInput, Student_programUncheckedUpdateWithoutStudentInput>
    create: XOR<Student_programCreateWithoutStudentInput, Student_programUncheckedCreateWithoutStudentInput>
    where?: Student_programWhereInput
  }

  export type Student_programUpdateToOneWithWhereWithoutStudentInput = {
    where?: Student_programWhereInput
    data: XOR<Student_programUpdateWithoutStudentInput, Student_programUncheckedUpdateWithoutStudentInput>
  }

  export type Student_programUpdateWithoutStudentInput = {
    program_name?: StringFieldUpdateOperationsInput | string
  }

  export type Student_programUncheckedUpdateWithoutStudentInput = {
    program_id?: IntFieldUpdateOperationsInput | number
    program_name?: StringFieldUpdateOperationsInput | string
  }

  export type Student_verificationUpsertWithoutStudentInput = {
    update: XOR<Student_verificationUpdateWithoutStudentInput, Student_verificationUncheckedUpdateWithoutStudentInput>
    create: XOR<Student_verificationCreateWithoutStudentInput, Student_verificationUncheckedCreateWithoutStudentInput>
    where?: Student_verificationWhereInput
  }

  export type Student_verificationUpdateToOneWithWhereWithoutStudentInput = {
    where?: Student_verificationWhereInput
    data: XOR<Student_verificationUpdateWithoutStudentInput, Student_verificationUncheckedUpdateWithoutStudentInput>
  }

  export type Student_verificationUpdateWithoutStudentInput = {
    verification_status?: Enumverification_statusFieldUpdateOperationsInput | $Enums.verification_status
    verification_sent?: DateTimeFieldUpdateOperationsInput | Date | string
    verification_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Student_verificationUncheckedUpdateWithoutStudentInput = {
    verification_status?: Enumverification_statusFieldUpdateOperationsInput | $Enums.verification_status
    verification_sent?: DateTimeFieldUpdateOperationsInput | Date | string
    verification_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StudentCreateWithoutStudent_verificationInput = {
    id?: string
    name: string
    nim: string
    email: string
    password: string
    student_class: Student_classCreateNestedOneWithoutStudentInput
    student_program: Student_programCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutStudent_verificationInput = {
    id?: string
    name: string
    nim: string
    email: string
    password: string
    class_id: number
    program_id: number
  }

  export type StudentCreateOrConnectWithoutStudent_verificationInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutStudent_verificationInput, StudentUncheckedCreateWithoutStudent_verificationInput>
  }

  export type StudentUpsertWithoutStudent_verificationInput = {
    update: XOR<StudentUpdateWithoutStudent_verificationInput, StudentUncheckedUpdateWithoutStudent_verificationInput>
    create: XOR<StudentCreateWithoutStudent_verificationInput, StudentUncheckedCreateWithoutStudent_verificationInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutStudent_verificationInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutStudent_verificationInput, StudentUncheckedUpdateWithoutStudent_verificationInput>
  }

  export type StudentUpdateWithoutStudent_verificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    student_class?: Student_classUpdateOneRequiredWithoutStudentNestedInput
    student_program?: Student_programUpdateOneRequiredWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutStudent_verificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
    program_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentCreateManyStudent_programInput = {
    id?: string
    name: string
    nim: string
    email: string
    password: string
    class_id: number
  }

  export type StudentUpdateWithoutStudent_programInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    student_class?: Student_classUpdateOneRequiredWithoutStudentNestedInput
    student_verification?: Student_verificationUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutStudent_programInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
    student_verification?: Student_verificationUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutStudent_programInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentCreateManyStudent_classInput = {
    id?: string
    name: string
    nim: string
    email: string
    password: string
    program_id: number
  }

  export type StudentUpdateWithoutStudent_classInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    student_program?: Student_programUpdateOneRequiredWithoutStudentNestedInput
    student_verification?: Student_verificationUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutStudent_classInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    program_id?: IntFieldUpdateOperationsInput | number
    student_verification?: Student_verificationUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutStudent_classInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    program_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use Student_programCountOutputTypeDefaultArgs instead
     */
    export type Student_programCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Student_programCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Student_classCountOutputTypeDefaultArgs instead
     */
    export type Student_classCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Student_classCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Student_programDefaultArgs instead
     */
    export type Student_programArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Student_programDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Student_classDefaultArgs instead
     */
    export type Student_classArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Student_classDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentDefaultArgs instead
     */
    export type StudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminDefaultArgs instead
     */
    export type AdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Student_verificationDefaultArgs instead
     */
    export type Student_verificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Student_verificationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}